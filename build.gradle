plugins {
    id 'application'
    id 'org.jreleaser' version '1.9.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.taehyun.study.jrelease.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jreleaser {
    project {
        authors = ['Taehyun']
        license = 'Apache-2.0'
        description = 'JRelese Test'
        copyright = 'Taehyun Jung'
        links {
            homepage = 'https://github.com/monolith-taehyun/jrelease-test'
        }
        inceptionYear = '2023'
    }

    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}üö® {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                contributors {
                    enabled = false
                }
                hide {
                    uncategorized = true
                    contributors = ['[bot]', 'github-actions', 'GitHub']
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
                extraProperties.put('categorizeScopes', true)
            }

            issues {
                enabled = true
                comment = 'üéâ This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
}